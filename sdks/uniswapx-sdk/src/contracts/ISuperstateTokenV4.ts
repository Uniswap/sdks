/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ISuperstateTokenV4Interface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "accountingPause()": FunctionFragment;
    "accountingPaused()": FunctionFragment;
    "accountingUnpause()": FunctionFragment;
    "adminBurn(address,uint256)": FunctionFragment;
    "allowListV2()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bridge(uint256,address,string,uint256)": FunctionFragment;
    "bridgeToBookEntry(uint256)": FunctionFragment;
    "bulkMint(address[],uint256[])": FunctionFragment;
    "initialize(string,string)": FunctionFragment;
    "initializeV2()": FunctionFragment;
    "initializeV3(address)": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "offchainRedeem(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "setChainIdSupport(uint256,bool)": FunctionFragment;
    "setRedemptionContract(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "accountingPause"
      | "accountingPaused"
      | "accountingUnpause"
      | "adminBurn"
      | "allowListV2"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "bridge"
      | "bridgeToBookEntry"
      | "bulkMint"
      | "initialize"
      | "initializeV2"
      | "initializeV3"
      | "isAllowed"
      | "mint"
      | "nonces"
      | "offchainRedeem"
      | "pause"
      | "permit"
      | "setChainIdSupport"
      | "setRedemptionContract"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountingPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountingUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminBurn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowListV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeToBookEntry",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkMint",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV3",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "offchainRedeem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainIdSupport",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountingPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountingUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowListV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeToBookEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bulkMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offchainRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainIdSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AccountingPaused(address)": EventFragment;
    "AccountingUnpaused(address)": EventFragment;
    "AdminBurn(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Bridge(address,address,uint256,address,string,uint256)": EventFragment;
    "Mint(address,address,uint256)": EventFragment;
    "OffchainRedeem(address,address,uint256)": EventFragment;
    "SetChainIdSupport(uint256,bool,bool)": EventFragment;
    "SetMaximumOracleDelay(uint256,uint256)": EventFragment;
    "SetOracle(address,address)": EventFragment;
    "SetRedemptionContract(address,address)": EventFragment;
    "SetStablecoinConfig(address,address,address,uint96,uint96)": EventFragment;
    "Subscribe(address,address,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountingUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bridge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffchainRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainIdSupport"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaximumOracleDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRedemptionContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStablecoinConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AccountingPausedEventObject {
  admin: string;
}
export type AccountingPausedEvent = TypedEvent<
  [string],
  AccountingPausedEventObject
>;

export type AccountingPausedEventFilter =
  TypedEventFilter<AccountingPausedEvent>;

export interface AccountingUnpausedEventObject {
  admin: string;
}
export type AccountingUnpausedEvent = TypedEvent<
  [string],
  AccountingUnpausedEventObject
>;

export type AccountingUnpausedEventFilter =
  TypedEventFilter<AccountingUnpausedEvent>;

export interface AdminBurnEventObject {
  burner: string;
  src: string;
  amount: BigNumber;
}
export type AdminBurnEvent = TypedEvent<
  [string, string, BigNumber],
  AdminBurnEventObject
>;

export type AdminBurnEventFilter = TypedEventFilter<AdminBurnEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BridgeEventObject {
  caller: string;
  src: string;
  amount: BigNumber;
  ethDestinationAddress: string;
  otherDestinationAddress: string;
  chainId: BigNumber;
}
export type BridgeEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  BridgeEventObject
>;

export type BridgeEventFilter = TypedEventFilter<BridgeEvent>;

export interface MintEventObject {
  minter: string;
  to: string;
  amount: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OffchainRedeemEventObject {
  burner: string;
  src: string;
  amount: BigNumber;
}
export type OffchainRedeemEvent = TypedEvent<
  [string, string, BigNumber],
  OffchainRedeemEventObject
>;

export type OffchainRedeemEventFilter = TypedEventFilter<OffchainRedeemEvent>;

export interface SetChainIdSupportEventObject {
  chainId: BigNumber;
  oldSupported: boolean;
  newSupported: boolean;
}
export type SetChainIdSupportEvent = TypedEvent<
  [BigNumber, boolean, boolean],
  SetChainIdSupportEventObject
>;

export type SetChainIdSupportEventFilter =
  TypedEventFilter<SetChainIdSupportEvent>;

export interface SetMaximumOracleDelayEventObject {
  oldMaxOracleDelay: BigNumber;
  newMaxOracleDelay: BigNumber;
}
export type SetMaximumOracleDelayEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetMaximumOracleDelayEventObject
>;

export type SetMaximumOracleDelayEventFilter =
  TypedEventFilter<SetMaximumOracleDelayEvent>;

export interface SetOracleEventObject {
  oldOracle: string;
  newOracle: string;
}
export type SetOracleEvent = TypedEvent<[string, string], SetOracleEventObject>;

export type SetOracleEventFilter = TypedEventFilter<SetOracleEvent>;

export interface SetRedemptionContractEventObject {
  oldRedemptionContract: string;
  newRedemptionContract: string;
}
export type SetRedemptionContractEvent = TypedEvent<
  [string, string],
  SetRedemptionContractEventObject
>;

export type SetRedemptionContractEventFilter =
  TypedEventFilter<SetRedemptionContractEvent>;

export interface SetStablecoinConfigEventObject {
  stablecoin: string;
  oldSweepDestination: string;
  newSweepDestination: string;
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type SetStablecoinConfigEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SetStablecoinConfigEventObject
>;

export type SetStablecoinConfigEventFilter =
  TypedEventFilter<SetStablecoinConfigEvent>;

export interface SubscribeEventObject {
  subscriber: string;
  stablecoin: string;
  stablecoinInAmount: BigNumber;
  stablecoinInAmountAfterFee: BigNumber;
  superstateTokenOutAmount: BigNumber;
}
export type SubscribeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  SubscribeEventObject
>;

export type SubscribeEventFilter = TypedEventFilter<SubscribeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ISuperstateTokenV4 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISuperstateTokenV4Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    accountingPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accountingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    accountingUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminBurn(
      src: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowListV2(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bridge(
      amount: PromiseOrValue<BigNumberish>,
      ethDestinationAddress: PromiseOrValue<string>,
      otherDestinationAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeToBookEntry(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bulkMint(
      dsts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeV2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeV3(
      _allowList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAllowed(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonces(
      toFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offchainRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainIdSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedemptionContract(
      _newRedemptionContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  accountingPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accountingPaused(overrides?: CallOverrides): Promise<boolean>;

  accountingUnpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminBurn(
    src: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowListV2(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bridge(
    amount: PromiseOrValue<BigNumberish>,
    ethDestinationAddress: PromiseOrValue<string>,
    otherDestinationAddress: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeToBookEntry(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bulkMint(
    dsts: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeV2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeV3(
    _allowList: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAllowed(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    dst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonces(
    toFind: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offchainRedeem(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainIdSupport(
    _chainId: PromiseOrValue<BigNumberish>,
    _supported: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedemptionContract(
    _newRedemptionContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    accountingPause(overrides?: CallOverrides): Promise<void>;

    accountingPaused(overrides?: CallOverrides): Promise<boolean>;

    accountingUnpause(overrides?: CallOverrides): Promise<void>;

    adminBurn(
      src: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowListV2(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridge(
      amount: PromiseOrValue<BigNumberish>,
      ethDestinationAddress: PromiseOrValue<string>,
      otherDestinationAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeToBookEntry(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bulkMint(
      dsts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(overrides?: CallOverrides): Promise<void>;

    initializeV3(
      _allowList: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowed(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(
      toFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainIdSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _supported: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionContract(
      _newRedemptionContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AccountingPaused(address)"(admin?: null): AccountingPausedEventFilter;
    AccountingPaused(admin?: null): AccountingPausedEventFilter;

    "AccountingUnpaused(address)"(admin?: null): AccountingUnpausedEventFilter;
    AccountingUnpaused(admin?: null): AccountingUnpausedEventFilter;

    "AdminBurn(address,address,uint256)"(
      burner?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): AdminBurnEventFilter;
    AdminBurn(
      burner?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): AdminBurnEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Bridge(address,address,uint256,address,string,uint256)"(
      caller?: null,
      src?: PromiseOrValue<string> | null,
      amount?: null,
      ethDestinationAddress?: PromiseOrValue<string> | null,
      otherDestinationAddress?: PromiseOrValue<string> | null,
      chainId?: null
    ): BridgeEventFilter;
    Bridge(
      caller?: null,
      src?: PromiseOrValue<string> | null,
      amount?: null,
      ethDestinationAddress?: PromiseOrValue<string> | null,
      otherDestinationAddress?: PromiseOrValue<string> | null,
      chainId?: null
    ): BridgeEventFilter;

    "Mint(address,address,uint256)"(
      minter?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): MintEventFilter;
    Mint(
      minter?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): MintEventFilter;

    "OffchainRedeem(address,address,uint256)"(
      burner?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): OffchainRedeemEventFilter;
    OffchainRedeem(
      burner?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): OffchainRedeemEventFilter;

    "SetChainIdSupport(uint256,bool,bool)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      oldSupported?: null,
      newSupported?: null
    ): SetChainIdSupportEventFilter;
    SetChainIdSupport(
      chainId?: PromiseOrValue<BigNumberish> | null,
      oldSupported?: null,
      newSupported?: null
    ): SetChainIdSupportEventFilter;

    "SetMaximumOracleDelay(uint256,uint256)"(
      oldMaxOracleDelay?: null,
      newMaxOracleDelay?: null
    ): SetMaximumOracleDelayEventFilter;
    SetMaximumOracleDelay(
      oldMaxOracleDelay?: null,
      newMaxOracleDelay?: null
    ): SetMaximumOracleDelayEventFilter;

    "SetOracle(address,address)"(
      oldOracle?: null,
      newOracle?: null
    ): SetOracleEventFilter;
    SetOracle(oldOracle?: null, newOracle?: null): SetOracleEventFilter;

    "SetRedemptionContract(address,address)"(
      oldRedemptionContract?: null,
      newRedemptionContract?: null
    ): SetRedemptionContractEventFilter;
    SetRedemptionContract(
      oldRedemptionContract?: null,
      newRedemptionContract?: null
    ): SetRedemptionContractEventFilter;

    "SetStablecoinConfig(address,address,address,uint96,uint96)"(
      stablecoin?: PromiseOrValue<string> | null,
      oldSweepDestination?: null,
      newSweepDestination?: null,
      oldFee?: null,
      newFee?: null
    ): SetStablecoinConfigEventFilter;
    SetStablecoinConfig(
      stablecoin?: PromiseOrValue<string> | null,
      oldSweepDestination?: null,
      newSweepDestination?: null,
      oldFee?: null,
      newFee?: null
    ): SetStablecoinConfigEventFilter;

    "Subscribe(address,address,uint256,uint256,uint256)"(
      subscriber?: PromiseOrValue<string> | null,
      stablecoin?: null,
      stablecoinInAmount?: null,
      stablecoinInAmountAfterFee?: null,
      superstateTokenOutAmount?: null
    ): SubscribeEventFilter;
    Subscribe(
      subscriber?: PromiseOrValue<string> | null,
      stablecoin?: null,
      stablecoinInAmount?: null,
      stablecoinInAmountAfterFee?: null,
      superstateTokenOutAmount?: null
    ): SubscribeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    accountingPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accountingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    accountingUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminBurn(
      src: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowListV2(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridge(
      amount: PromiseOrValue<BigNumberish>,
      ethDestinationAddress: PromiseOrValue<string>,
      otherDestinationAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeToBookEntry(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bulkMint(
      dsts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeV2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeV3(
      _allowList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAllowed(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonces(
      toFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offchainRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainIdSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedemptionContract(
      _newRedemptionContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountingPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accountingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountingUnpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminBurn(
      src: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowListV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridge(
      amount: PromiseOrValue<BigNumberish>,
      ethDestinationAddress: PromiseOrValue<string>,
      otherDestinationAddress: PromiseOrValue<string>,
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeToBookEntry(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bulkMint(
      dsts: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeV2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeV3(
      _allowList: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAllowed(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      toFind: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offchainRedeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainIdSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _supported: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionContract(
      _newRedemptionContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
